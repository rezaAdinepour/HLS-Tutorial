// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="comprator_comprator,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.904000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=80,HLS_VERSION=2023_2}" *)

module comprator (
        a0,
        a1,
        a2,
        a3,
        b0,
        b1,
        b2,
        b3,
        M,
        N,
        P
);


input  [0:0] a0;
input  [0:0] a1;
input  [0:0] a2;
input  [0:0] a3;
input  [0:0] b0;
input  [0:0] b1;
input  [0:0] b2;
input  [0:0] b3;
output  [0:0] M;
output  [0:0] N;
output  [0:0] P;

reg[0:0] M;

reg   [0:0] ap_phi_mux_storemerge3_phi_fu_122_p4;
wire   [0:0] or_ln27_2_fu_177_p2;
wire   [0:0] or_ln33_2_fu_243_p2;
reg   [0:0] ap_phi_mux_storemerge1_phi_fu_133_p4;
wire   [0:0] xor_ln33_4_fu_250_p2;
wire   [0:0] xor_ln27_fu_141_p2;
wire   [0:0] xor_ln27_1_fu_147_p2;
wire   [0:0] xor_ln27_2_fu_153_p2;
wire   [0:0] xor_ln27_3_fu_159_p2;
wire   [0:0] or_ln27_1_fu_171_p2;
wire   [0:0] or_ln27_fu_165_p2;
wire   [0:0] xor_ln33_fu_183_p2;
wire   [0:0] xor_ln33_1_fu_195_p2;
wire   [0:0] xor_ln33_2_fu_207_p2;
wire   [0:0] xor_ln33_3_fu_219_p2;
wire   [0:0] and_ln33_1_fu_201_p2;
wire   [0:0] and_ln33_2_fu_213_p2;
wire   [0:0] and_ln33_fu_189_p2;
wire   [0:0] and_ln33_3_fu_225_p2;
wire   [0:0] or_ln33_1_fu_237_p2;
wire   [0:0] or_ln33_fu_231_p2;
wire    ap_ce_reg;

always @ (*) begin
    if ((or_ln27_2_fu_177_p2 == 1'd1)) begin
        M = 1'd0;
    end else if ((or_ln27_2_fu_177_p2 == 1'd0)) begin
        M = 1'd1;
    end else begin
        M = 'bx;
    end
end

always @ (*) begin
    if ((or_ln27_2_fu_177_p2 == 1'd1)) begin
        ap_phi_mux_storemerge1_phi_fu_133_p4 = xor_ln33_4_fu_250_p2;
    end else if ((or_ln27_2_fu_177_p2 == 1'd0)) begin
        ap_phi_mux_storemerge1_phi_fu_133_p4 = 1'd0;
    end else begin
        ap_phi_mux_storemerge1_phi_fu_133_p4 = 'bx;
    end
end

always @ (*) begin
    if ((or_ln27_2_fu_177_p2 == 1'd1)) begin
        ap_phi_mux_storemerge3_phi_fu_122_p4 = or_ln33_2_fu_243_p2;
    end else if ((or_ln27_2_fu_177_p2 == 1'd0)) begin
        ap_phi_mux_storemerge3_phi_fu_122_p4 = 1'd0;
    end else begin
        ap_phi_mux_storemerge3_phi_fu_122_p4 = 'bx;
    end
end

assign and_ln33_1_fu_201_p2 = (xor_ln33_1_fu_195_p2 & a2);

assign and_ln33_2_fu_213_p2 = (xor_ln33_2_fu_207_p2 & a1);

assign and_ln33_3_fu_225_p2 = (xor_ln33_3_fu_219_p2 & a0);

assign and_ln33_fu_189_p2 = (xor_ln33_fu_183_p2 & a3);

assign or_ln27_1_fu_171_p2 = (xor_ln27_3_fu_159_p2 | xor_ln27_2_fu_153_p2);

assign or_ln27_2_fu_177_p2 = (or_ln27_fu_165_p2 | or_ln27_1_fu_171_p2);

assign or_ln27_fu_165_p2 = (xor_ln27_fu_141_p2 | xor_ln27_1_fu_147_p2);

assign or_ln33_1_fu_237_p2 = (and_ln33_fu_189_p2 | and_ln33_3_fu_225_p2);

assign or_ln33_2_fu_243_p2 = (or_ln33_fu_231_p2 | or_ln33_1_fu_237_p2);

assign or_ln33_fu_231_p2 = (and_ln33_2_fu_213_p2 | and_ln33_1_fu_201_p2);

assign xor_ln27_1_fu_147_p2 = (b2 ^ a2);

assign xor_ln27_2_fu_153_p2 = (b1 ^ a1);

assign xor_ln27_3_fu_159_p2 = (b0 ^ a0);

assign xor_ln27_fu_141_p2 = (b3 ^ a3);

assign xor_ln33_1_fu_195_p2 = (b2 ^ 1'd1);

assign xor_ln33_2_fu_207_p2 = (b1 ^ 1'd1);

assign xor_ln33_3_fu_219_p2 = (b0 ^ 1'd1);

assign xor_ln33_4_fu_250_p2 = (or_ln33_2_fu_243_p2 ^ 1'd1);

assign xor_ln33_fu_183_p2 = (b3 ^ 1'd1);

assign N = ap_phi_mux_storemerge3_phi_fu_122_p4;

assign P = ap_phi_mux_storemerge1_phi_fu_133_p4;

endmodule //comprator
