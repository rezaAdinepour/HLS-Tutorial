-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity comprator is
port (
    a0 : IN STD_LOGIC_VECTOR (0 downto 0);
    a1 : IN STD_LOGIC_VECTOR (0 downto 0);
    a2 : IN STD_LOGIC_VECTOR (0 downto 0);
    a3 : IN STD_LOGIC_VECTOR (0 downto 0);
    b0 : IN STD_LOGIC_VECTOR (0 downto 0);
    b1 : IN STD_LOGIC_VECTOR (0 downto 0);
    b2 : IN STD_LOGIC_VECTOR (0 downto 0);
    b3 : IN STD_LOGIC_VECTOR (0 downto 0);
    M : OUT STD_LOGIC_VECTOR (0 downto 0);
    N : OUT STD_LOGIC_VECTOR (0 downto 0);
    P : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of comprator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "comprator_comprator,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.904000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=80,HLS_VERSION=2023_2}";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_phi_mux_storemerge3_phi_fu_122_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_2_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_2_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_storemerge1_phi_fu_133_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_4_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_1_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_2_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_3_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_1_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_2_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_3_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_2_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_3_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    M_assign_proc : process(or_ln27_2_fu_177_p2)
    begin
        if ((or_ln27_2_fu_177_p2 = ap_const_lv1_1)) then 
            M <= ap_const_lv1_0;
        elsif ((or_ln27_2_fu_177_p2 = ap_const_lv1_0)) then 
            M <= ap_const_lv1_1;
        else 
            M <= "X";
        end if; 
    end process;

    N <= ap_phi_mux_storemerge3_phi_fu_122_p4;
    P <= ap_phi_mux_storemerge1_phi_fu_133_p4;
    and_ln33_1_fu_201_p2 <= (xor_ln33_1_fu_195_p2 and a2);
    and_ln33_2_fu_213_p2 <= (xor_ln33_2_fu_207_p2 and a1);
    and_ln33_3_fu_225_p2 <= (xor_ln33_3_fu_219_p2 and a0);
    and_ln33_fu_189_p2 <= (xor_ln33_fu_183_p2 and a3);

    ap_phi_mux_storemerge1_phi_fu_133_p4_assign_proc : process(or_ln27_2_fu_177_p2, xor_ln33_4_fu_250_p2)
    begin
        if ((or_ln27_2_fu_177_p2 = ap_const_lv1_1)) then 
            ap_phi_mux_storemerge1_phi_fu_133_p4 <= xor_ln33_4_fu_250_p2;
        elsif ((or_ln27_2_fu_177_p2 = ap_const_lv1_0)) then 
            ap_phi_mux_storemerge1_phi_fu_133_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_storemerge1_phi_fu_133_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_storemerge3_phi_fu_122_p4_assign_proc : process(or_ln27_2_fu_177_p2, or_ln33_2_fu_243_p2)
    begin
        if ((or_ln27_2_fu_177_p2 = ap_const_lv1_1)) then 
            ap_phi_mux_storemerge3_phi_fu_122_p4 <= or_ln33_2_fu_243_p2;
        elsif ((or_ln27_2_fu_177_p2 = ap_const_lv1_0)) then 
            ap_phi_mux_storemerge3_phi_fu_122_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_storemerge3_phi_fu_122_p4 <= "X";
        end if; 
    end process;

    or_ln27_1_fu_171_p2 <= (xor_ln27_3_fu_159_p2 or xor_ln27_2_fu_153_p2);
    or_ln27_2_fu_177_p2 <= (or_ln27_fu_165_p2 or or_ln27_1_fu_171_p2);
    or_ln27_fu_165_p2 <= (xor_ln27_fu_141_p2 or xor_ln27_1_fu_147_p2);
    or_ln33_1_fu_237_p2 <= (and_ln33_fu_189_p2 or and_ln33_3_fu_225_p2);
    or_ln33_2_fu_243_p2 <= (or_ln33_fu_231_p2 or or_ln33_1_fu_237_p2);
    or_ln33_fu_231_p2 <= (and_ln33_2_fu_213_p2 or and_ln33_1_fu_201_p2);
    xor_ln27_1_fu_147_p2 <= (b2 xor a2);
    xor_ln27_2_fu_153_p2 <= (b1 xor a1);
    xor_ln27_3_fu_159_p2 <= (b0 xor a0);
    xor_ln27_fu_141_p2 <= (b3 xor a3);
    xor_ln33_1_fu_195_p2 <= (b2 xor ap_const_lv1_1);
    xor_ln33_2_fu_207_p2 <= (b1 xor ap_const_lv1_1);
    xor_ln33_3_fu_219_p2 <= (b0 xor ap_const_lv1_1);
    xor_ln33_4_fu_250_p2 <= (or_ln33_2_fu_243_p2 xor ap_const_lv1_1);
    xor_ln33_fu_183_p2 <= (b3 xor ap_const_lv1_1);
end behav;
